** Working with Files
:PROPERTIES:
   :CUSTOM_ID: working-with-files
   :END:

First, let's make sure we know what directory Jupyter is working in. To use this, run =%pwd=, which stands for "print working directory." The =%= prefix is used for Jupyter "magic" commands (to see a full list, run =%lsmagic=).

#+begin_src python
%pwd
#+end_src

#+RESULTS:

Now let's make sure that the file we downloaded earlier, =moonstone.md=, is in our working directory. You can download this file from [[https://raw.githubusercontent.com/JonathanReeve/course-computational-literary-analysis/gh-pages/_texts/moonstone.md][the gh-pages branch of the course repository]].

#+begin_src python
%ls
#+end_src


If we're not in the right directory, we can change to a different directory using the =%cd= command.

#+begin_src python
%cd Homework
#+end_src


#+begin_src python
%ls
#+end_src


#+begin_src python
%pwd
#+end_src

We can also change to the higher-level or "parent" directory, which is called =..=

#+begin_src python
%cd ..
#+end_src


#+begin_src python
%ls
#+end_src


When trying to open a file, you must either provide the full path to your file (/home/yourname or C:...), or the relative path to local file in your working directory.

Since I know that my working directory has =moonstone.md= in it (I can see that by the output of =%ls= above), I can just open =moonstone.md=. But if this file were in my Downloads folder, which on my operating system is =/home/jon/Downloads=, I might want to open the file =/home/jon/Downloads/moonstone.md=.

The command below opens the plain text file for /The Moonstone/, gets the plain text out of it (i.e. reads it), and stores the resulting string in the variable called =moonstone=.

#+begin_src python
moonstone = open('moonstone.md').read()
#+end_src

Let's verify that it worked, by peeking at the first 500 characters of the file.

#+begin_src python
print(moonstone[:500])
#+end_src

#+begin_example
  ---
  layout: narrative
  title: "The Moonstone"
  author: Wilkie Collins
  editor: Jonathan Reeve
  rights: Public Domain
  source: Project Gutenberg
  publication-date: 2018
  toc:
  - Prologue
  - Chapter X
  - Chapter XV
  - Second Period
  - Second Narrative
  - Third Narrative
  - Fourth Narrative
  - Sixth Narrative
  ---

  ## Prologue

  The Storming of Seringapatam (1799)

  Extracted from a Family Paper

  I address these lines–written in India–to my relatives in England.

  My object is to explain the motive which has induced 
#+end_example

Yep, that's it. Let's get some different parts of this file by splitting it on occurrences of =##=.

#+begin_src python
moonstoneParts = moonstone.split('##')
#+end_src

Now let's look around, to find which are the parts of the prologue.

#+begin_src python
print(moonstoneParts[1][:500])
#+end_src

#+begin_example
   Prologue

  The Storming of Seringapatam (1799)

  Extracted from a Family Paper

  I address these lines–written in India–to my relatives in England.

  My object is to explain the motive which has induced me to refuse the
  right hand of friendship to my cousin, John Herncastle. The reserve
  which I have hitherto maintained in this matter has been misinterpreted
  by members of my family whose good opinion I cannot consent to forfeit.
  I request them to suspend their decision until they have read my
  narrat
#+end_example

That looks about right. Now where's part IV of the prologue?

#+begin_src python
print(moonstoneParts[4][:200])
#+end_src

#+begin_example
  # IV

  I beg it to be understood that what I write here about my cousin (unless
  some necessity should arise for making it public) is for the information
  of the family only. Herncastle has said nothing 
#+end_example

Great. So let's grab those four parts, as a list.

#+begin_src python
prologue = moonstoneParts[1:5]
#+end_src

#+begin_src python
type(prologue)
#+end_src

Let's use a =for= loop to show the length of each chapter in the prologue:

#+begin_src python
for part in prologue:
    print(len(part))
#+end_src

#+begin_example
  1047
  4293
  4692
  1912
#+end_example

Now we can count how often certain words occur in each part of the prologue. Here I'm also lowercasing each part first, so that "MOONSTONE," "Moonstone," and "moonstone" are treated the same.

#+begin_src python
for part in prologue:
    print(part.lower().count('moonstone'))
#+end_src

#+begin_example
  0
  5
  3
  0
#+end_example

Note that this is not quite yet a robust method for counting words. Even though we're normalizing the text to lowercase, =.count()= counts subwords as well as words, since it is blind to whitespace. Thus, searching for /tea/ would get counts of words like /teal/, and searching for /moonstone/ would also count the subword inside /moonstoned/.
